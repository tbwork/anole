<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.anole.infrastructure.dao.AnoleBossMapper" >
  <resultMap id="BaseResultMap" type="org.anole.infrastructure.model.AnoleBoss" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="alias" property="alias" jdbcType="VARCHAR" />
    <result column="address" property="address" jdbcType="VARCHAR" />
    <result column="port_for_worker" property="portForWorker" jdbcType="INTEGER" />
    <result column="status" property="status" jdbcType="TINYINT" />
    <result column="touch" property="touch" jdbcType="BIGINT" />
    <result column="extra_info" property="extraInfo" jdbcType="VARCHAR" />
    <result column="port_for_publisher" property="portForPublisher" jdbcType="INTEGER" />
    <result column="port_for_subscriber" property="portForSubscriber" jdbcType="INTEGER" />
    <result column="weight" property="weight" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, `alias`, address, port_for_worker, `status`, touch, extra_info, port_for_publisher, 
    port_for_subscriber, weight, create_time, update_time
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="org.anole.infrastructure.example.AnoleBossExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from anole_boss
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from anole_boss
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from anole_boss
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="org.anole.infrastructure.example.AnoleBossExample" >
    delete from anole_boss
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="org.anole.infrastructure.model.AnoleBoss" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into anole_boss (`alias`, address, port_for_worker, 
      `status`, touch, extra_info, 
      port_for_publisher, port_for_subscriber, weight, 
      create_time, update_time)
    values (#{alias,jdbcType=VARCHAR}, #{address,jdbcType=VARCHAR}, #{portForWorker,jdbcType=INTEGER}, 
      #{status,jdbcType=TINYINT}, #{touch,jdbcType=BIGINT}, #{extraInfo,jdbcType=VARCHAR}, 
      #{portForPublisher,jdbcType=INTEGER}, #{portForSubscriber,jdbcType=INTEGER}, #{weight,jdbcType=INTEGER}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="org.anole.infrastructure.model.AnoleBoss" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into anole_boss
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="alias != null" >
        `alias`,
      </if>
      <if test="address != null" >
        address,
      </if>
      <if test="portForWorker != null" >
        port_for_worker,
      </if>
      <if test="status != null" >
        `status`,
      </if>
      <if test="touch != null" >
        touch,
      </if>
      <if test="extraInfo != null" >
        extra_info,
      </if>
      <if test="portForPublisher != null" >
        port_for_publisher,
      </if>
      <if test="portForSubscriber != null" >
        port_for_subscriber,
      </if>
      <if test="weight != null" >
        weight,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="alias != null" >
        #{alias,jdbcType=VARCHAR},
      </if>
      <if test="address != null" >
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="portForWorker != null" >
        #{portForWorker,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        #{status,jdbcType=TINYINT},
      </if>
      <if test="touch != null" >
        #{touch,jdbcType=BIGINT},
      </if>
      <if test="extraInfo != null" >
        #{extraInfo,jdbcType=VARCHAR},
      </if>
      <if test="portForPublisher != null" >
        #{portForPublisher,jdbcType=INTEGER},
      </if>
      <if test="portForSubscriber != null" >
        #{portForSubscriber,jdbcType=INTEGER},
      </if>
      <if test="weight != null" >
        #{weight,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="org.anole.infrastructure.example.AnoleBossExample" resultType="java.lang.Integer" >
    select count(*) from anole_boss
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update anole_boss
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.alias != null" >
        `alias` = #{record.alias,jdbcType=VARCHAR},
      </if>
      <if test="record.address != null" >
        address = #{record.address,jdbcType=VARCHAR},
      </if>
      <if test="record.portForWorker != null" >
        port_for_worker = #{record.portForWorker,jdbcType=INTEGER},
      </if>
      <if test="record.status != null" >
        `status` = #{record.status,jdbcType=TINYINT},
      </if>
      <if test="record.touch != null" >
        touch = #{record.touch,jdbcType=BIGINT},
      </if>
      <if test="record.extraInfo != null" >
        extra_info = #{record.extraInfo,jdbcType=VARCHAR},
      </if>
      <if test="record.portForPublisher != null" >
        port_for_publisher = #{record.portForPublisher,jdbcType=INTEGER},
      </if>
      <if test="record.portForSubscriber != null" >
        port_for_subscriber = #{record.portForSubscriber,jdbcType=INTEGER},
      </if>
      <if test="record.weight != null" >
        weight = #{record.weight,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null" >
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update anole_boss
    set id = #{record.id,jdbcType=BIGINT},
      `alias` = #{record.alias,jdbcType=VARCHAR},
      address = #{record.address,jdbcType=VARCHAR},
      port_for_worker = #{record.portForWorker,jdbcType=INTEGER},
      `status` = #{record.status,jdbcType=TINYINT},
      touch = #{record.touch,jdbcType=BIGINT},
      extra_info = #{record.extraInfo,jdbcType=VARCHAR},
      port_for_publisher = #{record.portForPublisher,jdbcType=INTEGER},
      port_for_subscriber = #{record.portForSubscriber,jdbcType=INTEGER},
      weight = #{record.weight,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="org.anole.infrastructure.model.AnoleBoss" >
    update anole_boss
    <set >
      <if test="alias != null" >
        `alias` = #{alias,jdbcType=VARCHAR},
      </if>
      <if test="address != null" >
        address = #{address,jdbcType=VARCHAR},
      </if>
      <if test="portForWorker != null" >
        port_for_worker = #{portForWorker,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        `status` = #{status,jdbcType=TINYINT},
      </if>
      <if test="touch != null" >
        touch = #{touch,jdbcType=BIGINT},
      </if>
      <if test="extraInfo != null" >
        extra_info = #{extraInfo,jdbcType=VARCHAR},
      </if>
      <if test="portForPublisher != null" >
        port_for_publisher = #{portForPublisher,jdbcType=INTEGER},
      </if>
      <if test="portForSubscriber != null" >
        port_for_subscriber = #{portForSubscriber,jdbcType=INTEGER},
      </if>
      <if test="weight != null" >
        weight = #{weight,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.anole.infrastructure.model.AnoleBoss" >
    update anole_boss
    set `alias` = #{alias,jdbcType=VARCHAR},
      address = #{address,jdbcType=VARCHAR},
      port_for_worker = #{portForWorker,jdbcType=INTEGER},
      `status` = #{status,jdbcType=TINYINT},
      touch = #{touch,jdbcType=BIGINT},
      extra_info = #{extraInfo,jdbcType=VARCHAR},
      port_for_publisher = #{portForPublisher,jdbcType=INTEGER},
      port_for_subscriber = #{portForSubscriber,jdbcType=INTEGER},
      weight = #{weight,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>